// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
      
   
   // nots
   Not16(in=x, out=notX);
   Not16(in=y, out=notY);
   
   // zeros
   And16(a=x, b=notX, out=zeroX);
   And16(a=y, b=notY, out=zeroY);
   
   // X or Zero
   Mux16(a=x, b=zeroX, sel=zx, out=zxOUT);
   
   // zxOUT or NOTzxOUT
   Not16(in=zxOUT, out=NOTzxOUT);
   Mux16(a=zxOUT, b=NOTzxOUT, sel=nx, out=modX);
   
   // Y or Zero
   Mux16(a=y, b=zeroY, sel=zy, out=zyOUT);
   
   // zyOUT our NOTzyOUT
   Not16(in=zyOUT, out=NOTzyOUT);
   Mux16(a=zyOUT, b=NOTzyOUT, sel=ny, out=modY);
   
   // AND or ADD modX and modY
   And16(a=modX, b=modY, out=modXANDmodY);
   Add16(a=modX, b=modY, out=modXORmodY);
   Mux16(a=modXANDmodY, b=modXORmodY, sel=f, out=funcOUT);
   
   // func or not
   Not16(in=funcOUT, out=NOTfuncOUT);
   // for zero the -1 way below
   Mux16(a=funcOUT, b=NOTfuncOUT, sel=no, out[15]=ng, out[15]=MSD, out=zerotest, out=out);
   // for zero the OR way below
   // Mux16(a=funcOUT, b=NOTfuncOUT, sel=no, out[15]=MSD, out[0..7]=half1, out[7..14]=half2, out=out);
   
   
   
   // zero? the -1 way
   Add16(a=zerotest, b=true, out[15]=poszr);
   Not(in=poszr, out=negzr);
   Mux(a=poszr, b=negzr, sel=MSD, out=zr);
   
   /* zero? the OR way
    * Or8Way(in=half1, out=half1or);
    * Or8Way(in=half2, out=half2or);
    * Or(a=half1or, b=half2or, out=notzr);
    * Not(in=notzr, out=zr);
   */
   
   
   // negative?
   // No chip needed - pin15 on output > 1==neg, 0==pos
   // Xor(a=MSD, b=false, out=ng);
   
   
   
   
}